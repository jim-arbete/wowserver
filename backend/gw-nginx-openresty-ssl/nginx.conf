worker_processes auto;

error_log logs/error.log info;
error_log logs/error.log notice;

events {
    worker_connections 1024;
}

http {

    # server {
    #     listen 80;
    #     listen 443 ssl;
    #     server_name wow.zhoply.com;

    #     ssl_certificate /usr/local/openresty/default.pem;
    #     ssl_certificate_key /usr/local/openresty/default.key;

    #     # return 301 http://$host$request_uri; #works
    #     if ($scheme = https) {
    #         return 200 "ssl scheme:  $scheme"; # works
    #         # echo "here $scheme";
    #     }
    #     return 200 "http scheme:  $scheme"; # works
    #     # return 301 http://$host$request_uri;
    # }

    # server {
    #     listen 80 default_server;
    #     server_name wow.zhoply.com;

    #     return 200 "gg";
    # }
    resolver 8.8.8.8 ipv6=off; # use Google's open DNS server # for lua-resty-acme

    # --------- start lua-resty-acme - Automatic Let's Encrypt certificate serving --------- #
    # https://opm.openresty.org/package/fffonion/lua-resty-acme/

    lua_shared_dict acme 16m;

     # required to verify Let's Encrypt API
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    lua_ssl_verify_depth 2;

    
    init_by_lua_block {
        require("resty.acme.autossl").init({
            -- setting the following to true
            -- implies that you read and accepted https://letsencrypt.org/repository/
            tos_accepted = true,
            
            -- staging = true, -- When testing deployment, uncomment following for first time setup
            -- uncomment following to enable RSA + ECC double cert
            -- domain_key_types = { 'rsa', 'ecc' },
            -- uncomment following to enable tls-alpn-01 challenge
            -- enabled_challenge_handlers = { 'http-01', 'tls-alpn-01' },

            account_key_path = "/usr/local/openresty/account.key",
            account_email = "jim@zhoply.com",

            -- Include your domain that you wish to server autossl, to prevent potential abuse using fake SNI in SSL handshake.
            -- example multiple domains { "domain1.com", "domain2.com", "domain3.com" }
            domain_whitelist = { "zhoply.com" },
            -- To match a pattern in your domain name, for example all subdomains under example.com
            domain_whitelist_callback = function(domain)
                return ngx.re.match(domain, [[\.zhoply\.com$]], "jo")
            end
        })
    }
    init_worker_by_lua_block {
        require("resty.acme.autossl").init_worker()
    }

    # --------- stop lua-resty-acme - Automatic Let's Encrypt certificate serving --------- #

    # Options from => https://www.digitalocean.com/community/tutorials/how-to-use-the-openresty-web-framework-for-nginx-on-ubuntu-16-04
    sendfile        on; # Sending static files to a client.
    tcp_nopush      on; # Optimize sending static files to a client. Dependant on `sendfile`
    tcp_nodelay     on; # Only used when using the `keepalive` option on HTTP requests. Avoid overhead initiating an HTTP connection every req.
    gzip            on;
    gzip_comp_level 3;

    keepalive_timeout  65;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

    # proxy_pass needs this since it cant handle dynamic variables without a proper DNS configured for backend services..
    # based on => https://stackoverflow.com/questions/42383118/how-to-dynamically-add-an-upstream-in-nginx
    #1! -- WORKS but not needed, needs the inernal docker IP's to works, half finnished soloution, needs lua-resty-dns to obtain IP from our hostname
    # upstream backend {
    #     server 0.0.0.1;   # just an invalid address as a place holder
    #     balancer_by_lua_block {
    #         local balancer = require "ngx.balancer"
            
    #         -- local host = "127.0.0.2" -- works!
    #         -- local port = 8080
    #         local host = "service-account-api" -- needs lua-resty-dns soloution to obtain IP from our hostname
    #         local port = 80

    #         local ok, err = balancer.set_current_peer(host, port)
    #         if not ok then
    #             ngx.log(ngx.ERR, "failed to set the current peer: ", err)
    #             return ngx.exit(500)
    #         end
    #     }
    #     keepalive 10;  # connection pool
    # }



    server {
        listen 80;

        # --------- start lua-resty-acme - Automatic Let's Encrypt certificate serving --------- #
        listen 443 ssl;
        server_name zhoply.com;
        # fallback certs, make sure to create them before hand
        ssl_certificate /usr/local/openresty/default.pem;
        ssl_certificate_key /usr/local/openresty/default.key;
        ssl_certificate_by_lua_block {
            require("resty.acme.autossl").ssl_certificate()
        }
        location /.well-known {
            content_by_lua_block {
                require("resty.acme.autossl").serve_http_challenge()
            }
        }
        # --------- stop lua-resty-acme - Automatic Let's Encrypt certificate serving --------- #

        location / {
            # Setup openresty as a Proxy, only using this as SSL termination and forwarding request to backend
            resolver 127.0.0.11 ipv6=off; # Docker embedded DNS server at 127.0.0.11
            # 127.0.0.1       wow.zhoply.com
            # 127.0.0.1       accountapi.wow.zhoply.com
            # 127.0.0.1       logon.wow.zhoply.com # not needed, no webservice

            #1! -- WORKS but not needed, set hostname ALIAS for docker containers: container_name: accountapi.wow.zhoply.com in docker compose
            # set $target '';
            # access_by_lua_block {
            #     local mapDomainsToInternalDns = {
            #         ['wow.zhoply.com'] = 'frontend-wow',
            #         ['accountapi.wow.zhoply.com'] = 'accountapi.wow.zhoply.com',
            #         ['1accountapi.wow.zhoply.com'] = 'service-account-api',
            #     }
            #     local host = ''
            #     for domain, service in pairs(mapDomainsToInternalDns) do
            #         if (domain == ngx.var.host) then
            #             host = mapDomainsToInternalDns[domain]
            #             break
            #         end
            #     end

            #     if not host then
            #         ngx.log(ngx.ERR, "failed to get host key: ", err)
            #         return ngx.exit(500)
            #     end

            #     if host == ngx.null then
            #         ngx.log(ngx.ERR, "no host found for key ", key)
            #         return ngx.exit(400)
            #     end

            #     ngx.var.target = host

            #     -- ngx.say('target: ', host);
            #     -- ngx.say('host: ', ngx.var.host);
            #     -- ngx.say('request_uri: ', ngx.var.request_uri);
            #     -- ngx.log(ngx.INFO, 'test');
            # }

            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;

            # I have setup docker so it used the same hostname as the public resolved DNS, for services like API:s to be reachable
            proxy_pass http://$host$uri$is_args$args; # proxy only works if it can resolve the DNS internally/externally
            
            # proxy_pass http://$target$uri$is_args$args; #1! WORKS but not needed # proxy only works if it can resolve the DNS internally/externally
            # proxy_pass http://backend;
            # proxy_pass http://accountapi.wow.zhoply.com;
            # proxy_pass http://$host$request_uri;

            # debug variables
            # echo "http://$target ok"; # works
            # return 200 "$target ok";
        }
    }
}
